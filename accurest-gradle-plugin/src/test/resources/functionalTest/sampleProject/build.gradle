buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
	}
}

ext {
	restAssuredVersion = '2.5.0'
	spockVersion = '1.0-groovy-2.4'
	wiremockVersion = '2.1.7'

	accurestStubsBaseDirectory = 'src/test/resources/stubs'
}
ext['jetty.version'] = '9.2.17.v20160517'

group = 'io.codearte.accurest.testprojects'

subprojects {
	apply plugin: 'groovy'

	repositories {
		mavenCentral()
		mavenLocal()
	}

	dependencies {
		testCompile "org.codehaus.groovy:groovy-all:2.4.10"
		testCompile "org.spockframework:spock-core:$spockVersion"
		testCompile("junit:junit:4.12")
		testCompile("com.github.tomakehurst:wiremock:$wiremockVersion") {
			exclude group: 'org.eclipse.jetty'
		}
	}
}

configure([project(':fraudDetectionService'), project(':loanApplicationService')]) {
	apply plugin: 'spring-boot'
	apply plugin: 'accurest'
	apply plugin: 'maven-publish'

	ext {
		contractsDir = file("mappings")
		stubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
		wireMockStubsOutputDir = file(new File(stubsOutputDirRoot, 'repository/mappings/'))
		contractsOutputDir = file(new File(stubsOutputDirRoot, 'repository/accurest/'))
	}

	accurest {
		targetFramework = 'Spock'
		testMode = 'MockMvc'
		baseClassForTests = 'com.blogspot.toomuchcoding.MvcSpec'
		contractsDslDir = file("${project.projectDir.absolutePath}/mappings/")
		generatedTestSourcesDir = file("${project.buildDir}/generated-test-sources/")
		stubsOutputDir = wireMockStubsOutputDir
	}

	jar {
		version = '0.0.1'
	}

	dependencies {
		compile("org.springframework.boot:spring-boot-starter-web") {
			exclude module: "spring-boot-starter-tomcat"
		}
		compile("org.springframework.boot:spring-boot-starter-jetty")
		compile("org.springframework.boot:spring-boot-starter-actuator")

		testRuntime "org.spockframework:spock-spring:$spockVersion"
		testCompile "org.mockito:mockito-core"
		testCompile "org.springframework:spring-test"
		testCompile "org.springframework.boot:spring-boot-test"
		testCompile "com.jayway.restassured:rest-assured:$restAssuredVersion"
		testCompile "com.jayway.restassured:spring-mock-mvc:$restAssuredVersion"
	}

	task cleanup(type: Delete) {
		delete 'src/test/resources/mappings', 'src/test/resources/stubs'
	}

	clean.dependsOn('cleanup')

	task copyContracts(type: Copy) {
		from contractsDir
		into contractsOutputDir
		includeEmptyDirs = true
	}

	task stubsJar(type: Jar, dependsOn: ["generateWireMockClientStubs", copyContracts]) {
		baseName = "${project.name}"
		classifier = "stubs"
		from stubsOutputDirRoot
	}

	artifacts {
		archives stubsJar
	}

	publishing {
		publications {
			stubs(MavenPublication) {
				artifactId "${project.name}-stubs"
				artifact stubsJar
			}
		}
	}

	test {
		testLogging {
			exceptionFormat = 'full'
		}
	}
}

configure(project(':fraudDetectionService')) {
	test.dependsOn('generateWireMockClientStubs')
}

configure(project(':loanApplicationService')) {

	task copyCollaboratorStubs(type: Copy) {
		File fraudBuildDir = project(':fraudDetectionService').buildDir
		from(new File(fraudBuildDir, "/production/${project(':fraudDetectionService').name}-stubs/repository/"))
		into "src/test/resources/"
	}

	generateAccurest.dependsOn('copyCollaboratorStubs')
}

